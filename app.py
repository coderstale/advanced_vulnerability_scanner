import logging
from flask import Flask, render_template, request
from scanner.sql_injection import check_sql_injection
from scanner.xss import check_xss
from scanner.csrf import check_csrf
from scanner.port_scanner import scan_ports
from scanner.directory_traversal import check_directory_traversal
from scanner.security_headers import check_security_headers
from scanner.report_generator import generate_html_report, generate_pdf_report
from scanner.authentication import check_weak_passwords, check_mfa, check_session_handling
import subprocess

# Setup logging
logging.basicConfig(level=logging.INFO, filename='scanner.log', filemode='a',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

app = Flask(__name__)

def update_scanner():
    logging.info("Updating scanner...")
    try:
        subprocess.run(["python", "update.py"], check=True)
        logging.info("Scanner updated successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to update scanner: {e}")

@app.route('/')
def home():
    logging.info("Rendering home page.")
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    url = request.form['url']
    logging.info(f"Starting scan for URL: {url}")
    update_scanner()
    results = scan_website(url)
    logging.info(f"Scan completed for URL: {url}")
    return render_template('results.html', url=url, results=results)

def scan_website(url):
    results = {}
    logging.info(f"Performing vulnerability checks for URL: {url}")

    try:
        results["SQL Injection"] = "Vulnerable" if check_sql_injection(url) else "No vulnerability found."
    except Exception as e:
        logging.error(f"Error during SQL Injection check: {e}")
        results["SQL Injection"] = "Error occurred"

    try:
        results["XSS"] = "Vulnerable" if check_xss(url) else "No vulnerability found."
    except Exception as e:
        logging.error(f"Error during XSS check: {e}")
        results["XSS"] = "Error occurred"

    try:
        results["CSRF"] = "No vulnerability found."  # Implement CSRF check logic here
    except Exception as e:
        logging.error(f"Error during CSRF check: {e}")
        results["CSRF"] = "Error occurred"

    try:
        results["Open Ports"] = f"Ports {', '.join(map(str, scan_ports('127.0.0.1', 1, 1024)))} open."  # Replace '127.0.0.1' with actual IP
    except Exception as e:
        logging.error(f"Error during port scan: {e}")
        results["Open Ports"] = "Error occurred"

    try:
        results["Directory Traversal"] = "Vulnerable" if check_directory_traversal(url) else "No vulnerability found."
    except Exception as e:
        logging.error(f"Error during directory traversal check: {e}")
        results["Directory Traversal"] = "Error occurred"

    try:
        headers_check = check_security_headers(url)
        results["Security Headers"] = headers_check if isinstance(headers_check, str) else "See detailed report"
    except Exception as e:
        logging.error(f"Error during security headers check: {e}")
        results["Security Headers"] = "Error occurred"

    try:
        test_username = "testuser"
        test_password = "password"  # Replace with an actual password for testing
        results["Weak Passwords"] = "Vulnerable" if check_weak_passwords(url, "username", "password", "/login", test_username) else "No vulnerability found."
        results["MFA"] = "Not implemented" if not check_mfa(url) else "Implemented"
        results["Session Handling"] = "Improper" if check_session_handling(url, "username", "password", "/login", "/logout", test_username, test_password) else "Proper"
    except Exception as e:
        logging.error(f"Error during authentication checks: {e}")
        results["Authentication Checks"] = "Error occurred"

    # Generate reports
    try:
        generate_html_report(url, results)
        generate_pdf_report(url, results)
    except Exception as e:
        logging.error(f"Error generating reports: {e}")

    return results

if __name__ == "__main__":
    app.run(debug=True)
