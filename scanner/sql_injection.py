import logging
import requests
from ratelimit import limits, sleep_and_retry
import os

ONE_SECOND = 1

# Configure logger
logger = logging.getLogger(__name__)

def load_payloads(file_path):
    try:
        with open(file_path, 'r') as file:
            return [line.strip() for line in file]
    except FileNotFoundError:
        logger.error(f"Payload file not found: {file_path}")
        return []

# Construct the absolute path to the payloads file
base_dir = os.path.dirname(os.path.abspath(__file__))
payloads_file_path = os.path.join(base_dir, '../updates/payloads/sql_injection.txt')

sql_payloads = load_payloads(payloads_file_path)

@sleep_and_retry
@limits(calls=1, period=ONE_SECOND)
def check_sql_injection(url):
    vulnerable = False
    logger.info(f"Checking SQL Injection for URL: {url}")
    for payload in sql_payloads:
        test_url = f"{url}?id={payload}"  # Modify the URL to include payloads
        try:
            response = requests.get(test_url)
            if any(error in response.text.lower() for error in ["syntax error", "mysql", "sql", "you have an error in your sql syntax"]):
                logger.info(f"SQL Injection vulnerability found at {test_url}")
                vulnerable = True
                break
        except requests.RequestException as e:
            logger.error(f"Request to {test_url} failed: {e}")
    return vulnerable
