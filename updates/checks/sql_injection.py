import requests
from ratelimit import limits, sleep_and_retry
from updates.payloads.sql_injection import sql_payloads

ONE_SECOND = 1

@sleep_and_retry
@limits(calls=5, period=ONE_SECOND)
def check_sql_injection(url):
    vulnerable = False
    for payload in sql_payloads:
        test_url = f"{url}?id={payload}"  # Modify the URL to include payloads
        try:
            response = requests.get(test_url)
            if "syntax error" in response.text.lower() or "mysql" in response.text.lower():
                print(f"[+] SQL Injection vulnerability found at {test_url}")
                vulnerable = True
                break
        except requests.RequestException as e:
            print(f"Request to {test_url} failed: {e}")
    return vulnerable

if __name__ == "__main__":
    url = input("Enter URL to test for SQL injection: ")
    result = check_sql_injection(url)
    print(f"SQL Injection vulnerability detected: {result}")
